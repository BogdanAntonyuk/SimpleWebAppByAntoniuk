# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI/CD with Maven
on:
  push:
    branches: [ master ]
#   pull_request:
#     branches: [ master ]
#env:
#  PROJECT_ID: ${{ secrets.GCE_PROJECT }}
#  GCE_INSTANCE: debian10
#  GCE_INSTANCE_ZONE: europe-west3-c

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11.0.10
    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: Build with Maven
      run: mvn --batch-mode --update-snapshots verify
    - run: mkdir staging && cp target/*.jar staging
    - uses: actions/upload-artifact@v2
      with:
        name: target
        path: staging





#        - name: Maven Package
#      run: mvn -B clean package -DskipTests
#    - name: Maven Verify
#      run: mvn -B clean verify

#     - name: Build with Maven
#      run: mvn -B package --file pom.xml





  publish:

    runs-on: ubuntu-latest

    needs: build
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v2
    - name: Build & push Docker image
      uses: mr-smithers-excellent/docker-build-push@v5
      with:
        tags: latest
        image: bobwithb/myfirstapp
        registry: docker.io
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ansible
    - name: Configuring and lunching ansible to download image from dockerHub and run on GCP servers with label 'prod'
      env:
        GCP_SERVICE_ACCOUNT_FILE: ${{ secrets.GCP_SERVICE_ACCOUNT_FILE }}
        GCP_SSH_USER: ${{ secrets.SSH_USER }}
        GCP_SSH_KEY: ${{ secrets.ID_RSA }}
      run: |
        cd ansible/
        mkdir .ssh
        echo "$GCP_SSH_KEY" > .ssh/id_rsa
        chmod 400 .ssh/id_rsa
        echo "$GCP_SERVICE_ACCOUNT_FILE" > servisce-file.json

        pip install requests google-auth

        ansible-playbook main.yml





        

    

#     - uses: google-github-actions/setup-gcloud@master
#       with:
#         version: '290.0.1'
#         service_account_key: ${{ secrets.GCE_SA_KEY }}
#         project_id: ${{ secrets.GCE_PROJECT }}
# 
#       # Configure Docker to use the gcloud command-line tool as a credential
#       # helper for authentication
#     - run: |-
#         gcloud --quiet auth configure-docker
#       # Build the Docker image
#     - name: Build
#       run: |-
#         docker build --tag "gcr.io/$PROJECT_ID/$GCE_INSTANCE-image:$GITHUB_SHA" .
#       # Push the Docker image to Google Container Registry
#     - name: Publish
#       run: |-
#         docker push "gcr.io/$PROJECT_ID/$GCE_INSTANCE-image:$GITHUB_SHA"
#     - name: Deploy
#       run: |-
#         gcloud compute instances update-container "$GCE_INSTANCE" \
#           --zone "$GCE_INSTANCE_ZONE" \
#           --container-image "gcr.io/$PROJECT_ID/$GCE_INSTANCE-image:$GITHUB_SHA"
